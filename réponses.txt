1. Gestion des images
a. docker pull hello-world
b. La commande est docker images, avec -q on obtient uniquement l'ID de l'image
c. Cela permet de savoir la release utilisée
d. Il s'agit de la commande docker rmi

2. Gestion des conteneurs
a. docker run hello-world
b. docker run -it python:slim, il faut sortir du terminal en faisant Ctrl-D
c. On peut vérifier en faisant echo $MESSAGE dans la console du conteneur
d. docker run -v /home/toto/shared:/etc -it alpine:latest
e. Oui, car il devient persistant sur le système hôte
f. docker run --name apache -p 8080:80  httpd:latest #8080 = port hôte, 80 = port conteneur
g. Il s'agit de l'option -d, pour "detached"
h. docker exec -it apache /bin/sh
i. docker ps, docker ps -a
j. docker stop apache, docker rm apache
k. Il s'agit de la commande docker container prune, qui permet d'effacer tous les conteneurs inactifs
l. docker rm $(docker ps -a -q)
m. docker cp : permet de copier des fichiers vers ou depuis le conteneur, docker rename : permet de renommer un conteneur à postériori

3. Docker Compose

https://docs.docker.com/engine/install/debian/#install-using-the-repository

docker compose up -> permet de lire la configuration décrite dans le fichier compose.yaml
docker compose up -d -> permet de libérer le terminal
docker compose logs
